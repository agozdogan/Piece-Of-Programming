import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import numpy as np



df  = pd.DataFrame({'x': [0.298441,
0.294673,
0.125128,
0.084383,
0.115765,
0.163686,
0.102164,
0.107456,
0.049222,
0.223189,
0.040558,
0.145057,
0.117950,
0.079027,
0.058417,
0.069874,
0.208623,
0.083813,
0.078843,
0.298441,
0.343982,
0.140193,
0.167975,
0.126085,
0.175885,
0.148731,
0.079876,
0.187837,
0.176698,
0.036856,
0.079189,
0.080639,
0.073137,
0.057781,
0.064852,
0.125089,
0.069430,
0.096484,
0.294673,
0.343982,
0.085783,
0.083718,
0.150039,
0.142799,
0.111779,
0.089561,
0.099389,
0.252167,
0.027128,
0.089878,
0.080024,
0.046847,
0.041753,
0.045817,
0.126268,
0.063512,
0.048069,
0.125128,
0.140193,
0.085783,
0.322146,
0.169755,
0.180965,
0.499838,
0.080863,
0.166808,
0.189254,
0.046381,
0.094633,
0.165389,
0.128320,
0.053270,
0.121929,
0.158762,
0.091389,
0.076484,
0.084383,
0.167975,
0.083718,
0.322146,
0.120153,
0.191244,
0.377408,
0.063250,
0.171673,
0.090317,
0.024909,
0.067795,
0.104399,
0.101712,
0.057543,
0.092060,
0.109177,
0.055496,
0.084659,
0.115765,
0.126085,
0.150039,
0.169755,
0.120153,
0.134023,
0.131895,
0.080364,
0.066246,
0.147159,
0.026782,
0.073146,
0.116938,
0.061073,
0.052376,
0.081063,
0.123624,
0.071840,
0.069971,
0.163686,
0.175885,
0.142799,
0.180965,
0.191244,
0.134023,
0.182659,
0.100971,
0.098796,
0.213343,
0.061082,
0.129251,
0.096764,
0.101606,
0.070114,
0.098138,
0.199141,
0.123820,
0.104918,
0.102164,
0.148731,
0.111779,
0.499838,
0.377408,
0.131895,
0.182659,
0.064717,
0.151515,
0.149702,
0.039837,
0.099652,
0.117515,
0.104383,
0.051482,
0.096308,
0.151761,
0.078054,
0.082097,
0.107456,
0.079876,
0.089561,
0.080863,
0.063250,
0.080364,
0.100971,
0.064717,
0.102478,
0.087879,
0.044007,
0.051759,
0.041420,
0.072742,
0.042806,
0.063658,
0.095686,
0.076775,
0.055348,
0.049222,
0.187837,
0.099389,
0.166808,
0.171673,
0.066246,
0.098796,
0.151515,
0.102478,
0.053934,
0.015817,
0.034228,
0.023845,
0.049909,
0.033539,
0.070389,
0.060499,
0.030098,
0.029097
],
        'y': [
            0.223189,
0.176698,
0.252167,
0.189254,
0.090317,
0.147159,
0.213343,
0.149702,
0.087879,
0.053934,
0.145220,
0.199358,
0.146204,
0.099262,
0.084860,
0.079416,
0.267339,
0.242023,
0.129956,
0.040558,
0.036856,
0.027128,
0.046381,
0.024909,
0.026782,
0.061082,
0.039837,
0.044007,
0.015817,
0.145220,
0.054057,
0.022887,
0.038947,
0.056507,
0.023764,
0.062555,
0.652746,
0.101969,
0.145057,
0.079189,
0.089878,
0.094633,
0.067795,
0.073146,
0.129251,
0.099652,
0.051759,
0.034228,
0.199358,
0.054057,
0.086730,
0.086540,
0.076396,
0.077582,
0.160590,
0.161701,
0.171904,
0.117950,
0.080639,
0.080024,
0.165389,
0.104399,
0.116938,
0.096764,
0.117515,
0.041420,
0.023845,
0.146204,
0.022887,
0.086730,
0.074083,
0.030183,
0.063508,
0.110837,
0.050057,
0.046567,
0.079027,
0.073137,
0.046847,
0.128320,
0.101712,
0.061073,
0.101606,
0.104383,
0.072742,
0.049909,
0.099262,
0.038947,
0.086540,
0.074083,
0.112168,
0.084206,
0.080156,
0.085479,
0.086182,
0.058417,
0.057781,
0.041753,
0.053270,
0.057543,
0.052376,
0.070114,
0.051482,
0.042806,
0.033539,
0.084860,
0.056507,
0.076396,
0.030183,
0.112168,
0.043215,
0.092370,
0.083189,
0.100484,
0.069874,
0.064852,
0.045817,
0.121929,
0.092060,
0.081063,
0.098138,
0.096308,
0.063658,
0.070389,
0.079416,
0.023764,
0.077582,
0.063508,
0.084206,
0.043215,
0.098039,
0.055420,
0.086148,
0.208623,
0.125089,
0.126268,
0.158762,
0.109177,
0.123624,
0.199141,
0.151761,
0.095686,
0.060499,
0.267339,
0.062555,
0.160590,
0.110837,
0.080156,
0.092370,
0.098039,
0.162663,
0.119259,
0.083813,
0.069430,
0.063512,
0.091389,
0.055496,
0.071840,
0.123820,
0.078054,
0.076775,
0.030098,
0.242023,
0.652746,
0.161701,
0.050057,
0.085479,
0.083189,
0.055420,
0.162663,
0.194927,
0.078843,
0.096484,
0.048069,
0.076484,
0.084659,
0.069971,
0.104918,
0.082097,
0.055348,
0.029097,
0.129956,
0.101969,
0.171904,
0.046567,
0.086182,
0.100484,
0.086148,
0.119259,
0.194927
]
       })

np.random.seed(200)
k = 2
# centroids[i] = [x, y]
centroids = {
    i+1: [np.random.randint(0, 80), np.random.randint(0, 80)]
    for i in range(k)
}
    
fig = plt.figure(figsize=(5, 5))
plt.scatter(df['x'], df['y'], color='k')
colmap = {1: 'r', 2: 'g'}
for i in centroids.keys():
    plt.scatter(*centroids[i], color=colmap[i])
plt.xlim(0, 80)
plt.ylim(0, 80)
plt.show()


def assignment(df, centroids):
    for i in centroids.keys():
        # sqrt((x1 - x2)^2 - (y1 - y2)^2)
        df['distance_from_{}'.format(i)] = (
            np.sqrt(
                (float(df['x'][0]) - centroids[i][0]) ** 2
                + (float(df['y'][0]) - centroids[i][1]) ** 2
            )
        )
    centroid_distance_cols = ['distance_from_{}'.format(i) for i in centroids.keys()]
    df['closest'] = df.loc[:, centroid_distance_cols].idxmin(axis=1)
    df['closest'] = df['closest'].map(lambda x: int(x.lstrip('distance_from_')))
    df['color'] = df['closest'].map(lambda x: colmap[x])
    return df

df = assignment(df, centroids)
print(df.head())

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')
for i in centroids.keys():
    plt.scatter(*centroids[i], color=colmap[i])
plt.xlim(0, 80)
plt.ylim(0, 80)
plt.show()

